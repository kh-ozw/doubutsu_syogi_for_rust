pub mod state {
    extern crate fxhash;
    use fxhash::FxHashMap;

    //use std::collections::HashMap;

    pub struct PlayerInfo {
        pub turn: String,
        pub try_line: String,
        pub hand_alf: String,
        pub opponent_turn: String,
        pub opponent_try_line: String,
        pub opponent_hand_alf: String,
    }

    pub fn next_move_list(src: (&str, &str)) -> Vec<String> {
        match src {
            ("A1", "c1") => vec![String::from("")],
            ("A2", "c1") => vec![String::from("A1")],
            ("A3", "c1") => vec![String::from("A2")],
            ("A4", "c1") => vec![String::from("A3")],
            ("B1", "c1") => vec![String::from("")],
            ("B2", "c1") => vec![String::from("B1")],
            ("B3", "c1") => vec![String::from("B2")],
            ("B4", "c1") => vec![String::from("B3")],
            ("C1", "c1") => vec![String::from("")],
            ("C2", "c1") => vec![String::from("C1")],
            ("C3", "c1") => vec![String::from("C2")],
            ("C4", "c1") => vec![String::from("C3")],
            ("A1", "c2") => vec![String::from("A2")],
            ("A2", "c2") => vec![String::from("A3")],
            ("A3", "c2") => vec![String::from("A4")],
            ("A4", "c2") => vec![String::from("")],
            ("B1", "c2") => vec![String::from("B2")],
            ("B2", "c2") => vec![String::from("B3")],
            ("B3", "c2") => vec![String::from("B4")],
            ("B4", "c2") => vec![String::from("")],
            ("C1", "c2") => vec![String::from("C2")],
            ("C2", "c2") => vec![String::from("C3")],
            ("C3", "c2") => vec![String::from("C4")],
            ("C4", "c2") => vec![String::from("")],
            ("A1", "g1") => vec![String::from("A2"), String::from("B1")],
            ("A2", "g1") => vec![String::from("A3"), String::from("B2"), String::from("A1")],
            ("A3", "g1") => vec![String::from("A4"), String::from("B3"), String::from("A2")],
            ("A4", "g1") => vec![String::from("B4"), String::from("A3")],
            ("B1", "g1") => vec![String::from("B2"), String::from("C1"), String::from("A1")],
            ("B2", "g1") => vec![
                String::from("B3"),
                String::from("C2"),
                String::from("A2"),
                String::from("B1"),
            ],
            ("B3", "g1") => vec![
                String::from("B4"),
                String::from("C3"),
                String::from("A3"),
                String::from("B2"),
            ],
            ("B4", "g1") => vec![String::from("C4"), String::from("A4"), String::from("B3")],
            ("C1", "g1") => vec![String::from("C2"), String::from("B1")],
            ("C2", "g1") => vec![String::from("C3"), String::from("B2"), String::from("C1")],
            ("C3", "g1") => vec![String::from("C4"), String::from("B3"), String::from("C2")],
            ("C4", "g1") => vec![String::from("B4"), String::from("C3")],
            ("A1", "g2") => vec![String::from("A2"), String::from("B1")],
            ("A2", "g2") => vec![String::from("A3"), String::from("B2"), String::from("A1")],
            ("A3", "g2") => vec![String::from("A4"), String::from("B3"), String::from("A2")],
            ("A4", "g2") => vec![String::from("B4"), String::from("A3")],
            ("B1", "g2") => vec![String::from("B2"), String::from("C1"), String::from("A1")],
            ("B2", "g2") => vec![
                String::from("B3"),
                String::from("C2"),
                String::from("A2"),
                String::from("B1"),
            ],
            ("B3", "g2") => vec![
                String::from("B4"),
                String::from("C3"),
                String::from("A3"),
                String::from("B2"),
            ],
            ("B4", "g2") => vec![String::from("C4"), String::from("A4"), String::from("B3")],
            ("C1", "g2") => vec![String::from("C2"), String::from("B1")],
            ("C2", "g2") => vec![String::from("C3"), String::from("B2"), String::from("C1")],
            ("C3", "g2") => vec![String::from("C4"), String::from("B3"), String::from("C2")],
            ("C4", "g2") => vec![String::from("B4"), String::from("C3")],
            ("A1", "e1") => vec![String::from("B2")],
            ("A2", "e1") => vec![String::from("B3"), String::from("B1")],
            ("A3", "e1") => vec![String::from("B4"), String::from("B2")],
            ("A4", "e1") => vec![String::from("B3")],
            ("B1", "e1") => vec![String::from("C2"), String::from("A2")],
            ("B2", "e1") => vec![
                String::from("C3"),
                String::from("A3"),
                String::from("A1"),
                String::from("C1"),
            ],
            ("B3", "e1") => vec![
                String::from("C4"),
                String::from("A4"),
                String::from("A2"),
                String::from("C2"),
            ],
            ("B4", "e1") => vec![String::from("A3"), String::from("C3")],
            ("C1", "e1") => vec![String::from("B2")],
            ("C2", "e1") => vec![String::from("B3"), String::from("B1")],
            ("C3", "e1") => vec![String::from("B4"), String::from("B2")],
            ("C4", "e1") => vec![String::from("B3")],
            ("A1", "e2") => vec![String::from("B2")],
            ("A2", "e2") => vec![String::from("B3"), String::from("B1")],
            ("A3", "e2") => vec![String::from("B4"), String::from("B2")],
            ("A4", "e2") => vec![String::from("B3")],
            ("B1", "e2") => vec![String::from("C2"), String::from("A2")],
            ("B2", "e2") => vec![
                String::from("C3"),
                String::from("A3"),
                String::from("A1"),
                String::from("C1"),
            ],
            ("B3", "e2") => vec![
                String::from("C4"),
                String::from("A4"),
                String::from("A2"),
                String::from("C2"),
            ],
            ("B4", "e2") => vec![String::from("A3"), String::from("C3")],
            ("C1", "e2") => vec![String::from("B2")],
            ("C2", "e2") => vec![String::from("B3"), String::from("B1")],
            ("C3", "e2") => vec![String::from("B4"), String::from("B2")],
            ("C4", "e2") => vec![String::from("B3")],
            ("A1", "h1") => vec![String::from("A2"), String::from("B1")],
            ("A2", "h1") => vec![
                String::from("A3"),
                String::from("B1"),
                String::from("B2"),
                String::from("A1"),
            ],
            ("A3", "h1") => vec![
                String::from("A4"),
                String::from("B2"),
                String::from("B3"),
                String::from("A2"),
            ],
            ("A4", "h1") => vec![String::from("B3"), String::from("B4"), String::from("A3")],
            ("B1", "h1") => vec![String::from("B2"), String::from("C1"), String::from("A1")],
            ("B2", "h1") => vec![
                String::from("B3"),
                String::from("C1"),
                String::from("C2"),
                String::from("A1"),
                String::from("A2"),
                String::from("B1"),
            ],
            ("B3", "h1") => vec![
                String::from("B4"),
                String::from("C2"),
                String::from("C3"),
                String::from("A2"),
                String::from("A3"),
                String::from("B2"),
            ],
            ("B4", "h1") => vec![
                String::from("C3"),
                String::from("C4"),
                String::from("A3"),
                String::from("A4"),
                String::from("B3"),
            ],
            ("C1", "h1") => vec![String::from("C2"), String::from("B1")],
            ("C2", "h1") => vec![
                String::from("C3"),
                String::from("B1"),
                String::from("B2"),
                String::from("C1"),
            ],
            ("C3", "h1") => vec![
                String::from("C4"),
                String::from("B2"),
                String::from("B3"),
                String::from("C2"),
            ],
            ("C4", "h1") => vec![String::from("B3"), String::from("B4"), String::from("C3")],
            ("A1", "h2") => vec![String::from("B1"), String::from("B2"), String::from("A2")],
            ("A2", "h2") => vec![
                String::from("B2"),
                String::from("B3"),
                String::from("A1"),
                String::from("A3"),
            ],
            ("A3", "h2") => vec![
                String::from("B3"),
                String::from("B4"),
                String::from("A2"),
                String::from("A4"),
            ],
            ("A4", "h2") => vec![String::from("B4"), String::from("A3")],
            ("B1", "h2") => vec![
                String::from("C1"),
                String::from("C2"),
                String::from("A2"),
                String::from("A1"),
                String::from("B2"),
            ],
            ("B2", "h2") => vec![
                String::from("C2"),
                String::from("C3"),
                String::from("A3"),
                String::from("A2"),
                String::from("B1"),
                String::from("B3"),
            ],
            ("B3", "h2") => vec![
                String::from("C3"),
                String::from("C4"),
                String::from("A4"),
                String::from("A3"),
                String::from("B2"),
                String::from("B4"),
            ],
            ("B4", "h2") => vec![String::from("C4"), String::from("A4"), String::from("B3")],
            ("C1", "h2") => vec![String::from("B2"), String::from("B1"), String::from("C2")],
            ("C2", "h2") => vec![
                String::from("B3"),
                String::from("B2"),
                String::from("C1"),
                String::from("C3"),
            ],
            ("C3", "h2") => vec![
                String::from("B4"),
                String::from("B3"),
                String::from("C2"),
                String::from("C4"),
            ],
            ("C4", "h2") => vec![String::from("B4"), String::from("C3")],
            ("A1", "l1") => vec![String::from("B1"), String::from("B2"), String::from("A2")],
            ("A2", "l1") => vec![
                String::from("A1"),
                String::from("B1"),
                String::from("B2"),
                String::from("B3"),
                String::from("A3"),
            ],
            ("A3", "l1") => vec![
                String::from("A2"),
                String::from("B2"),
                String::from("B3"),
                String::from("B4"),
                String::from("A4"),
            ],
            ("A4", "l1") => vec![String::from("A3"), String::from("B3"), String::from("B4")],
            ("B1", "l1") => vec![
                String::from("C1"),
                String::from("A1"),
                String::from("C2"),
                String::from("A2"),
                String::from("B2"),
            ],
            ("B2", "l1") => vec![
                String::from("B1"),
                String::from("C1"),
                String::from("A1"),
                String::from("C2"),
                String::from("A2"),
                String::from("C3"),
                String::from("A3"),
                String::from("B3"),
            ],
            ("B3", "l1") => vec![
                String::from("B2"),
                String::from("C2"),
                String::from("A2"),
                String::from("C3"),
                String::from("A3"),
                String::from("C4"),
                String::from("A4"),
                String::from("B4"),
            ],
            ("B4", "l1") => vec![
                String::from("B3"),
                String::from("C3"),
                String::from("A3"),
                String::from("C4"),
                String::from("A4"),
            ],
            ("C1", "l1") => vec![String::from("B1"), String::from("B2"), String::from("C2")],
            ("C2", "l1") => vec![
                String::from("C1"),
                String::from("B1"),
                String::from("B2"),
                String::from("B3"),
                String::from("C3"),
            ],
            ("C3", "l1") => vec![
                String::from("C2"),
                String::from("B2"),
                String::from("B3"),
                String::from("B4"),
                String::from("C4"),
            ],
            ("C4", "l1") => vec![String::from("C3"), String::from("B3"), String::from("B4")],
            ("A1", "l2") => vec![String::from("B1"), String::from("B2"), String::from("A2")],
            ("A2", "l2") => vec![
                String::from("A1"),
                String::from("B1"),
                String::from("B2"),
                String::from("B3"),
                String::from("A3"),
            ],
            ("A3", "l2") => vec![
                String::from("A2"),
                String::from("B2"),
                String::from("B3"),
                String::from("B4"),
                String::from("A4"),
            ],
            ("A4", "l2") => vec![String::from("A3"), String::from("B3"), String::from("B4")],
            ("B1", "l2") => vec![
                String::from("C1"),
                String::from("A1"),
                String::from("C2"),
                String::from("A2"),
                String::from("B2"),
            ],
            ("B2", "l2") => vec![
                String::from("B1"),
                String::from("C1"),
                String::from("A1"),
                String::from("C2"),
                String::from("A2"),
                String::from("C3"),
                String::from("A3"),
                String::from("B3"),
            ],
            ("B3", "l2") => vec![
                String::from("B2"),
                String::from("C2"),
                String::from("A2"),
                String::from("C3"),
                String::from("A3"),
                String::from("C4"),
                String::from("A4"),
                String::from("B4"),
            ],
            ("B4", "l2") => vec![
                String::from("B3"),
                String::from("C3"),
                String::from("A3"),
                String::from("C4"),
                String::from("A4"),
            ],
            ("C1", "l2") => vec![String::from("B1"), String::from("B2"), String::from("C2")],
            ("C2", "l2") => vec![
                String::from("C1"),
                String::from("B1"),
                String::from("B2"),
                String::from("B3"),
                String::from("C3"),
            ],
            ("C3", "l2") => vec![
                String::from("C2"),
                String::from("B2"),
                String::from("B3"),
                String::from("B4"),
                String::from("C4"),
            ],
            ("C4", "l2") => vec![String::from("C3"), String::from("B3"), String::from("B4")],
            _ => vec![],
        }
    }

    impl PlayerInfo {
        // 手を打った後の盤面を作成する関数
        pub fn make_next_board(
            &self,
            mut boarda: FxHashMap<&str, &str>,
            move_tuple: (&str, &str),
        ) -> FxHashMap<&str, &str> {
            let (src, dst): (&str, &str) = move_tuple;
            // 移動先に駒がない場合
            if !&board.contains_key(dst) {
                //board.insert(dst, board.get(src));
                let a = 0;
            } else {
                let animal_name = board.get(dst).unwrap();
                // println!("{}", dst);

                &board.remove(dst);
                &board.insert(dst, board.get(src).unwrap());
                &board.remove(src);
            }
            return board;
        }
    }
}
